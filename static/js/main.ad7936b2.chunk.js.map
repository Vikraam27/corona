{"version":3,"sources":["CoronaRow.js","App.js","serviceWorker.js","index.js"],"names":["CoronaRow","key","this","props","results","countryInfo","_id","alt","width","src","flag","country","cases","active","recovered","deaths","todayCases","React","Component","App","state","performSearch","console","log","$","ajax","url","success","searcResult","data","coronaRows","forEach","coronaRow","push","setState","rows","error","xhr","status","err","className","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0OAiBeA,G,6KAZP,OAAM,wBAAIC,IAAKC,KAAKC,MAAMC,QAAQC,YAAYC,KAC9C,4BAAI,yBAAKC,IAAI,OAAOC,MAAM,KAAMC,IAAKP,KAAKC,MAAMC,QAAQC,YAAYK,OAApE,WAAoFR,KAAKC,MAAMC,QAAQO,SAErG,4BAAKT,KAAKC,MAAMC,QAAQQ,OACxB,4BAAKV,KAAKC,MAAMC,QAAQS,QACxB,4BAAKX,KAAKC,MAAMC,QAAQU,WACxB,4BAAKZ,KAAKC,MAAMC,QAAQW,QACxB,4BAAKb,KAAKC,MAAMC,QAAQY,iB,GAVVC,IAAMC,Y,gBC2FfC,E,kDAtFb,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IACDiB,MAAQ,GAcjB,EAAKC,gBAhBe,E,4DAmBF,IAAD,OACbC,QAAQC,IAAI,OAGZC,IAAEC,KAAK,CACHC,IAHc,2CAIdC,QAAS,SAACC,GACRN,QAAQC,IAAI,gBACIM,OAAhB,IACIC,EAAa,GACjBF,EAAYG,SAAQ,SAAC3B,GAEjB,IAAM4B,EAAY,kBAAC,EAAD,CAAW5B,QAASA,IACtC0B,EAAWG,KAAKD,MAIpB,EAAKE,SAAS,CAACC,KAAML,KAIvBM,MAAO,SAACC,EAAIC,EAAOC,GACjBjB,QAAQC,IAAI,oB,+BAMpB,OACE,yBAAKiB,UAAU,OAEb,2BAAOA,UAAU,YACb,+BACE,4BACE,4BAAI,yBAAKA,UAAU,WAAWjC,IAAI,WAAWE,IAAI,cACjD,wBAAID,MAAO,MACX,4BAAI,uDAKlB,2BAAOiC,GAAG,aACR,+BACA,4BACE,uCACA,0CACA,2CAEA,yCACA,2CACA,2CAIDvC,KAAKkB,MAAMe,OAGd,gCACE,yE,GA9EgBjB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLd,QAAQc,MAAMA,EAAMuB,a","file":"static/js/main.ad7936b2.chunk.js","sourcesContent":["import React from 'react'\n\nclass CoronaRow extends React.Component{\n  \n    render(){\n        return<tr key={this.props.results.countryInfo._id}>\n        <td><img alt=\"flag\" width=\"19\"  src={this.props.results.countryInfo.flag}/> &ensp; {this.props.results.country}</td>\n        \n          <td>{this.props.results.cases}</td>\n          <td>{this.props.results.active}</td>\n          <td>{this.props.results.recovered}</td>\n          <td>{this.props.results.deaths}</td>\n          <td>{this.props.results.todayCases}</td>\n      </tr>\n    }\n}\n\nexport default CoronaRow","import React, { Component } from 'react';\nimport './App.css';\nimport CoronaRow from './CoronaRow.js'\nimport $, { data } from 'jquery'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n    // console.log('this my initalizer')\n// const coronas = [\n//   {id:0,flag:\"https://disease.sh/assets/img/flags/in.png\" ,country:\"Indonesia\",TotalCase:2302,Recovered:3484,totalDeath:392,todayCase:395},\n//   {id:1, flag:\"https://disease.sh/assets/img/flags/in.png\", country:\"Indonesia\",TotalCase:2302,Recovered:3484,totalDeath:392,todayCase:395},\n//   {id:2, flag:\"https://disease.sh/assets/img/flags/in.png\", country:\"Indonesia\",TotalCase:2302,Recovered:3484,totalDeath:392,todayCase:395}\n// ]\n//     var coronaRows = []\n//     coronas.forEach((corona)=>{\n//       console.log(corona.id)\n//       const coronaRow = <CoronaRow corona={corona}/>\n//       coronaRows.push(coronaRow)\n//     })\n//     this.state = {rows: coronaRows}\nthis.performSearch()\n  }\n\n  performSearch(){\n    console.log('vkv')\n    const urlString = \"https://disease.sh/v3/covid-19/countries\"\n    \n    $.ajax({\n        url: urlString,\n        success: (searcResult)=>{\n          console.log('fetch succes') \n          const results = data\n          var coronaRows = []\n          searcResult.forEach((results) =>{\n              // console.log(results)\n              const coronaRow = <CoronaRow results={results}/>\n              coronaRows.push(coronaRow)\n\n          })\n\n          this.setState({rows: coronaRows})\n          \n\n        },\n        error: (xhr,status,err) =>{\n          console.log('error fetch')\n        }\n    })\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n     \n      <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td><img className=\"App-logo\" alt=\"app icon\" src=\"viru.png\"/></td>\n              <td width =\"8\"/>\n              <td><h2>Corona Virus Cases </h2></td>\n            </tr>\n          </tbody>\n        </table>\n       \n<table id=\"customers\">\n  <tbody>\n  <tr>\n    <th>Country</th>\n    <th>Total case</th>\n    <th>Active case</th>\n    \n    <th>Recovered</th>\n    <th>Total death</th>\n    <th>Today case</th>\n    \n    \n  </tr>\n  {this.state.rows}\n  </tbody>\n</table>\n<footer>\n  <p>Corona Active Case &copy; 2020, Vikram</p>\n</footer>\n</div>\n \n    \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}